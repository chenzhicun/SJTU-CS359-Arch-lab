                      | #######################################################################
                      | # Test for copying block of size 63;
                      | #######################################################################
  0x000:              | 	.pos 0
  0x000: 30f434060000 | main:	irmovl Stack, %esp  	# Set up stack pointer
  0x006: 30f534060000 | 	irmovl Stack, %ebp  	# Set up base pointer
                      | 
                      | 	# Set up arguments for copy function and then invoke it
  0x00c: 30f03f000000 | 	irmovl $63, %eax		# src and dst have 63 elements
  0x012: a00f         | 	pushl %eax
  0x014: 30f0f4040000 | 	irmovl dest, %eax	# dst array
  0x01a: a00f         | 	pushl %eax
  0x01c: 30f0e4030000 | 	irmovl src, %eax	# src array
  0x022: a00f         | 	pushl %eax
  0x024: 802a000000   | 	call ncopy		 
  0x029: 00           | 	halt			# should halt with num nonzeros in %eax
  0x02a:              | StartFun:
                      | #/* $begin ncopy-ys */
                      | ##################################################################
                      | # ncopy.ys - Copy a src block of len ints to dst.
                      | # Return the number of positive ints (>0) contained in src.
                      | #
                      | # Include your name and ID here.
                      | # Author: Yifei Wei	518030910159
                      | # Co-author: Zhicun Chen	518030910173
                      | # Describe how and why you modified the baseline code.
                      | #
                      | # Intuitions of enhancement:
                      | # 1. As is shown in chapter 5.8 in CS:APP, loop unrolling technique
                      | # would be useful for performance enhancement. Based on this
                      | # intuition, this program will handle the copy with sequently 16, 8
                      | # , 4, 2, 1 elements each time.
                      | #
                      | # 2. If we just read a value from source -> store it to destination, 
                      | # a bubble is required to avoid data hazard, which will greatly 
                      | # decline the performance. To solve this, we could handle 2 elements
                      | # each time following the order: read #1 -> read #2 -> write #1 ->
                      | # write #2. In this way the number of bubbles will be declined 
                      | # implicitly.
                      | ##################################################################
                      | # Do not modify this portion
                      | # Function prologue.
  0x02a: a05f         | ncopy:	pushl %ebp		# Save old frame pointer
  0x02c: 2045         | 	rrmovl %esp,%ebp	# Set up new frame pointer
  0x02e: a06f         | 	pushl %esi		# Save callee-save regs
  0x030: a03f         | 	pushl %ebx
  0x032: a07f         | 	pushl %edi
  0x034: 503508000000 | 	mrmovl 8(%ebp),%ebx	# src
  0x03a: 502510000000 | 	mrmovl 16(%ebp),%edx	# len
  0x040: 50150c000000 | 	mrmovl 12(%ebp),%ecx	# dst
                      | 
                      | ##################################################################
                      | # You can modify this portion
                      | 	# Loop header
                      | #	xorl %eax,%eax		# count = 0;
                      | #	andl %edx,%edx		# len <= 0?
                      | #	jle Done		# if so, goto Done:
                      | 
                      | #Loop:	mrmovl (%ebx), %esi	# read val from src...
                      | #	rmmovl %esi, (%ecx)	# ...and store it to dst
                      | #	andl %esi, %esi		# val <= 0?
                      | #	jle Npos		# if so, goto Npos:
                      | #	irmovl $1, %edi
                      | #	addl %edi, %eax		# count++
                      | #Npos:	irmovl $1, %edi
                      | #	subl %edi, %edx		# len--
                      | #	irmovl $4, %edi
                      | #	addl %edi, %ebx		# src++
                      | #	addl %edi, %ecx		# dst++
                      | #	andl %edx,%edx		# len > 0?
                      | #	jg Loop			# if so, goto Loop:
                      | 
                      | # Initial and test if the remain is greater than 16
  0x046: 30f000000000 | T16:	irmovl $0, %eax
  0x04c: c0f2f0ffffff | 	iaddl $-16, %edx
  0x052: 72fe010000   | 	jl T8			# if edx < 16, test 8
                      | 
  0x057: 506300000000 | A0:	mrmovl (%ebx), %esi	# read #1
  0x05d: 507304000000 | 	mrmovl 4(%ebx), %edi 	# read #2
  0x063: 406100000000 | 	rmmovl %esi, (%ecx)	# write #1
  0x069: 407104000000 | 	rmmovl %edi, 4(%ecx)	# write #2
  0x06f: 6266         | 	andl %esi, %esi		# #1 > 0?
  0x071: 717c000000   | 	jle A1
  0x076: c0f001000000 | 	iaddl $1, %eax		# count++
                      | 
  0x07c: 6277         | A1:	andl %edi, %edi		# #2 > 0?
  0x07e: 7189000000   | 	jle A2
  0x083: c0f001000000 | 	iaddl $1, %eax
                      | 
  0x089: 506308000000 | A2:	mrmovl 8(%ebx), %esi    #from this on, each A(2i),
  0x08f: 50730c000000 | 	mrmovl 12(%ebx), %edi 	# A(2i+1) are similar to    
  0x095: 406108000000 |         rmmovl %esi, 8(%ecx)    # A0, A1
  0x09b: 40710c000000 |         rmmovl %edi, 12(%ecx)    
  0x0a1: 6266         |         andl %esi, %esi        
  0x0a3: 71ae000000   |         jle A3
  0x0a8: c0f001000000 |         iaddl $1, %eax
                      | 
  0x0ae: 6277         | A3:     andl %edi, %edi        
  0x0b0: 71bb000000   |         jle A4
  0x0b5: c0f001000000 |         iaddl $1, %eax
                      | 
  0x0bb: 506310000000 | A4:     mrmovl 16(%ebx), %esi    
  0x0c1: 507314000000 |         mrmovl 20(%ebx), %edi       
  0x0c7: 406110000000 |         rmmovl %esi, 16(%ecx)    
  0x0cd: 407114000000 |         rmmovl %edi, 20(%ecx)   
  0x0d3: 6266         |         andl %esi, %esi
  0x0d5: 71e0000000   |         jle A5
  0x0da: c0f001000000 |         iaddl $1, %eax
                      | 
  0x0e0: 6277         | A5:     andl %edi, %edi         
  0x0e2: 71ed000000   |         jle A6
  0x0e7: c0f001000000 |         iaddl $1, %eax
                      | 
  0x0ed: 506318000000 | A6:     mrmovl 24(%ebx), %esi   
  0x0f3: 50731c000000 |         mrmovl 28(%ebx), %edi                              
  0x0f9: 406118000000 |         rmmovl %esi, 24(%ecx)   
  0x0ff: 40711c000000 |         rmmovl %edi, 28(%ecx)
  0x105: 6266         |         andl %esi, %esi
  0x107: 7112010000   |         jle A7
  0x10c: c0f001000000 |         iaddl $1, %eax
                      | 
  0x112: 6277         | A7:     andl %edi, %edi
  0x114: 711f010000   |         jle A8
  0x119: c0f001000000 |         iaddl $1, %eax
                      | 
  0x11f: 506320000000 | A8:     mrmovl 32(%ebx), %esi
  0x125: 507324000000 |         mrmovl 36(%ebx), %edi
  0x12b: 406120000000 |         rmmovl %esi, 32(%ecx)
  0x131: 407124000000 |         rmmovl %edi, 36(%ecx)
  0x137: 6266         |         andl %esi, %esi
  0x139: 7144010000   |         jle A9
  0x13e: c0f001000000 |         iaddl $1, %eax
                      | 
  0x144: 6277         | A9:     andl %edi, %edi
  0x146: 7151010000   |         jle A10
  0x14b: c0f001000000 |         iaddl $1, %eax
                      | 
  0x151: 506328000000 | A10:    mrmovl 40(%ebx), %esi
  0x157: 50732c000000 |         mrmovl 44(%ebx), %edi
  0x15d: 406128000000 |         rmmovl %esi, 40(%ecx)
  0x163: 40712c000000 |         rmmovl %edi, 44(%ecx)
  0x169: 6266         |         andl %esi, %esi
  0x16b: 7176010000   |         jle A11
  0x170: c0f001000000 |         iaddl $1, %eax
                      | 
  0x176: 6277         | A11:    andl %edi, %edi
  0x178: 7183010000   |         jle A12
  0x17d: c0f001000000 |         iaddl $1, %eax
                      | 
  0x183: 506330000000 | A12:    mrmovl 48(%ebx), %esi
  0x189: 507334000000 |         mrmovl 52(%ebx), %edi
  0x18f: 406130000000 |         rmmovl %esi, 48(%ecx)
  0x195: 407134000000 |         rmmovl %edi, 52(%ecx)
  0x19b: 6266         |         andl %esi, %esi
  0x19d: 71a8010000   |         jle A13
  0x1a2: c0f001000000 |         iaddl $1, %eax
                      | 
  0x1a8: 6277         | A13:    andl %edi, %edi
  0x1aa: 71b5010000   |         jle A14
  0x1af: c0f001000000 |         iaddl $1, %eax
                      | 
  0x1b5: 506338000000 | A14:    mrmovl 56(%ebx), %esi
  0x1bb: 50733c000000 |         mrmovl 60(%ebx), %edi
  0x1c1: 406138000000 |         rmmovl %esi, 56(%ecx)
  0x1c7: 40713c000000 |         rmmovl %edi, 60(%ecx)
  0x1cd: 6266         |         andl %esi, %esi
  0x1cf: 71da010000   |         jle A15
  0x1d4: c0f001000000 |         iaddl $1, %eax
                      | 
  0x1da: 6277         | A15:    andl %edi, %edi
  0x1dc: 71e7010000   |         jle A16
  0x1e1: c0f001000000 |         iaddl $1, %eax
                      | 
  0x1e7: c0f340000000 | A16:	iaddl $64, %ebx		# update source
  0x1ed: c0f140000000 | 	iaddl $64, %ecx		# update destination
  0x1f3: c0f2f0ffffff | 	iaddl $-16, %edx	# if still remains more than 16
  0x1f9: 7557000000   | 	jge A0			# go back
                      | 
  0x1fe: c0f208000000 | T8:	iaddl $8, %edx		# try with 8 elements
  0x204: 72e3020000   | 	jl T4			# if less, jump to 4
                      | 
                      | 
  0x209: 506300000000 | B0:     mrmovl (%ebx), %esi     # similar to A.
  0x20f: 507304000000 |         mrmovl 4(%ebx), %edi    
  0x215: 406100000000 |         rmmovl %esi, (%ecx)     
  0x21b: 407104000000 |         rmmovl %edi, 4(%ecx)    
  0x221: 6266         |         andl %esi, %esi         
  0x223: 712e020000   |         jle B1
  0x228: c0f001000000 |         iaddl $1, %eax          
                      | 
  0x22e: 6277         | B1:     andl %edi, %edi         
  0x230: 713b020000   |         jle B2
  0x235: c0f001000000 |         iaddl $1, %eax
                      | 
  0x23b: 506308000000 | B2:     mrmovl 8(%ebx), %esi    
  0x241: 50730c000000 |         mrmovl 12(%ebx), %edi       
  0x247: 406108000000 |         rmmovl %esi, 8(%ecx)    
  0x24d: 40710c000000 |         rmmovl %edi, 12(%ecx)
  0x253: 6266         |         andl %esi, %esi
  0x255: 7160020000   |         jle B3
  0x25a: c0f001000000 |         iaddl $1, %eax
                      | 
  0x260: 6277         | B3:     andl %edi, %edi
  0x262: 716d020000   |         jle B4
  0x267: c0f001000000 |         iaddl $1, %eax
                      | 
  0x26d: 506310000000 | B4:     mrmovl 16(%ebx), %esi
  0x273: 507314000000 |         mrmovl 20(%ebx), %edi
  0x279: 406110000000 |         rmmovl %esi, 16(%ecx)
  0x27f: 407114000000 |         rmmovl %edi, 20(%ecx)
  0x285: 6266         |         andl %esi, %esi
  0x287: 7192020000   |         jle B5
  0x28c: c0f001000000 |         iaddl $1, %eax
                      | 
  0x292: 6277         | B5:     andl %edi, %edi
  0x294: 719f020000   |         jle B6
  0x299: c0f001000000 |         iaddl $1, %eax
                      | 
  0x29f: 506318000000 | B6:     mrmovl 24(%ebx), %esi
  0x2a5: 50731c000000 |         mrmovl 28(%ebx), %edi
  0x2ab: 406118000000 |         rmmovl %esi, 24(%ecx)
  0x2b1: 40711c000000 |         rmmovl %edi, 28(%ecx)
  0x2b7: 6266         |         andl %esi, %esi
  0x2b9: 71c4020000   |         jle B7
  0x2be: c0f001000000 |         iaddl $1, %eax
                      | 
  0x2c4: 6277         | B7:     andl %edi, %edi
  0x2c6: 71d1020000   |         jle B8
  0x2cb: c0f001000000 |         iaddl $1, %eax
                      | 
  0x2d1: c0f320000000 | B8:	iaddl $32, %ebx
  0x2d7: c0f120000000 | 	iaddl $32, %ecx
  0x2dd: c0f2f8ffffff | 	iaddl -8, %edx
                      | 
                      | 
  0x2e3: c0f204000000 | T4:	iaddl $4, %edx
  0x2e9: 7264030000   | 	jl T2
                      | 
  0x2ee: 506300000000 | C0:     mrmovl (%ebx), %esi     # similar to A.
  0x2f4: 507304000000 |         mrmovl 4(%ebx), %edi    
  0x2fa: 406100000000 |         rmmovl %esi, (%ecx)     
  0x300: 407104000000 |         rmmovl %edi, 4(%ecx)    
  0x306: 6266         |         andl %esi, %esi
  0x308: 7113030000   |         jle C1
  0x30d: c0f001000000 |         iaddl $1, %eax
                      | 
  0x313: 6277         | C1:     andl %edi, %edi
  0x315: 7120030000   |         jle C2
  0x31a: c0f001000000 |         iaddl $1, %eax
                      | 
  0x320: 506308000000 | C2:     mrmovl 8(%ebx), %esi    
  0x326: 50730c000000 |         mrmovl 12(%ebx), %edi                              
  0x32c: 406108000000 |         rmmovl %esi, 8(%ecx)    
  0x332: 40710c000000 |         rmmovl %edi, 12(%ecx)
  0x338: 6266         |         andl %esi, %esi
  0x33a: 7145030000   |         jle C3
  0x33f: c0f001000000 |         iaddl $1, %eax
                      | 
  0x345: 6277         | C3:     andl %edi, %edi
  0x347: 7152030000   |         jle C4
  0x34c: c0f001000000 |         iaddl $1, %eax
                      | 
  0x352: c0f310000000 | C4:	iaddl $16, %ebx
  0x358: c0f110000000 | 	iaddl $16, %ecx
  0x35e: c0f2fcffffff | 	iaddl -4, %edx
                      | 
                      | 
  0x364: c0f202000000 | T2:	iaddl $2, %edx
  0x36a: 72b3030000   | 	jl T1
                      | 
  0x36f: 506300000000 | D0:     mrmovl (%ebx), %esi     # similar to A.
  0x375: 507304000000 |         mrmovl 4(%ebx), %edi
  0x37b: 406100000000 |         rmmovl %esi, (%ecx)
  0x381: 407104000000 |         rmmovl %edi, 4(%ecx)
  0x387: 6266         |         andl %esi, %esi
  0x389: 7194030000   |         jle D1
  0x38e: c0f001000000 |         iaddl $1, %eax
                      | 
  0x394: 6277         | D1:     andl %edi, %edi
  0x396: 71a1030000   |         jle D2
  0x39b: c0f001000000 |         iaddl $1, %eax
                      | 
  0x3a1: c0f308000000 | D2:	iaddl $8, %ebx
  0x3a7: c0f108000000 | 	iaddl $8, %ecx
  0x3ad: c0f2feffffff | 	iaddl -2, %edx
                      | 
                      | 
  0x3b3: c0f201000000 | T1:	iaddl $1, %edx
  0x3b9: 72d7030000   | 	jl Done
                      | 
  0x3be: 506300000000 | E0:	mrmovl (%ebx), %esi
  0x3c4: 406100000000 | 	rmmovl %esi, (%ecx)
  0x3ca: 6266         | 	andl %esi, %esi
  0x3cc: 71d7030000   | 	jle Done
  0x3d1: c0f001000000 | 	iaddl $1, %eax
                      | 
                      | 
                      | 	
                      | 	
                      | ##################################################################
                      | # Do not modify the following section of code
                      | # Function epilogue.
  0x3d7:              | Done:
  0x3d7: b07f         | 	popl %edi               # Restore callee-save registers
  0x3d9: b03f         | 	popl %ebx
  0x3db: b06f         | 	popl %esi
  0x3dd: 2054         | 	rrmovl %ebp, %esp
  0x3df: b05f         | 	popl %ebp
  0x3e1: 90           | 	ret
                      | ##################################################################
                      | # Keep the following label at the end of your function
  0x3e2:              | End:
                      | #/* $end ncopy-ys */
  0x3e2:              | EndFun:
                      | 
                      | ###############################
                      | # Source and destination blocks 
                      | ###############################
  0x3e4:              | 	.align 4
  0x3e4:              | src:
  0x3e4: 01000000     | 	.long 1
  0x3e8: 02000000     | 	.long 2
  0x3ec: 03000000     | 	.long 3
  0x3f0: fcffffff     | 	.long -4
  0x3f4: fbffffff     | 	.long -5
  0x3f8: 06000000     | 	.long 6
  0x3fc: f9ffffff     | 	.long -7
  0x400: f8ffffff     | 	.long -8
  0x404: f7ffffff     | 	.long -9
  0x408: f6ffffff     | 	.long -10
  0x40c: 0b000000     | 	.long 11
  0x410: f4ffffff     | 	.long -12
  0x414: 0d000000     | 	.long 13
  0x418: f2ffffff     | 	.long -14
  0x41c: 0f000000     | 	.long 15
  0x420: f0ffffff     | 	.long -16
  0x424: efffffff     | 	.long -17
  0x428: eeffffff     | 	.long -18
  0x42c: edffffff     | 	.long -19
  0x430: 14000000     | 	.long 20
  0x434: 15000000     | 	.long 21
  0x438: eaffffff     | 	.long -22
  0x43c: 17000000     | 	.long 23
  0x440: 18000000     | 	.long 24
  0x444: e7ffffff     | 	.long -25
  0x448: e6ffffff     | 	.long -26
  0x44c: 1b000000     | 	.long 27
  0x450: e4ffffff     | 	.long -28
  0x454: 1d000000     | 	.long 29
  0x458: 1e000000     | 	.long 30
  0x45c: e1ffffff     | 	.long -31
  0x460: 20000000     | 	.long 32
  0x464: 21000000     | 	.long 33
  0x468: deffffff     | 	.long -34
  0x46c: 23000000     | 	.long 35
  0x470: dcffffff     | 	.long -36
  0x474: 25000000     | 	.long 37
  0x478: 26000000     | 	.long 38
  0x47c: 27000000     | 	.long 39
  0x480: 28000000     | 	.long 40
  0x484: d7ffffff     | 	.long -41
  0x488: d6ffffff     | 	.long -42
  0x48c: 2b000000     | 	.long 43
  0x490: d4ffffff     | 	.long -44
  0x494: 2d000000     | 	.long 45
  0x498: 2e000000     | 	.long 46
  0x49c: 2f000000     | 	.long 47
  0x4a0: d0ffffff     | 	.long -48
  0x4a4: cfffffff     | 	.long -49
  0x4a8: ceffffff     | 	.long -50
  0x4ac: 33000000     | 	.long 51
  0x4b0: ccffffff     | 	.long -52
  0x4b4: 35000000     | 	.long 53
  0x4b8: caffffff     | 	.long -54
  0x4bc: 37000000     | 	.long 55
  0x4c0: c8ffffff     | 	.long -56
  0x4c4: c7ffffff     | 	.long -57
  0x4c8: 3a000000     | 	.long 58
  0x4cc: c5ffffff     | 	.long -59
  0x4d0: c4ffffff     | 	.long -60
  0x4d4: 3d000000     | 	.long 61
  0x4d8: 3e000000     | 	.long 62
  0x4dc: c1ffffff     | 	.long -63
  0x4e0: fadebc00     | 	.long 0xbcdefa # This shouldn't get moved
                      | 
  0x4f0:              | 	.align 16
  0x4f0:              | Predest:
  0x4f0: fadebc00     | 	.long 0xbcdefa
  0x4f4:              | dest:
  0x4f4: abefcd00     | 	.long 0xcdefab
  0x4f8: abefcd00     | 	.long 0xcdefab
  0x4fc: abefcd00     | 	.long 0xcdefab
  0x500: abefcd00     | 	.long 0xcdefab
  0x504: abefcd00     | 	.long 0xcdefab
  0x508: abefcd00     | 	.long 0xcdefab
  0x50c: abefcd00     | 	.long 0xcdefab
  0x510: abefcd00     | 	.long 0xcdefab
  0x514: abefcd00     | 	.long 0xcdefab
  0x518: abefcd00     | 	.long 0xcdefab
  0x51c: abefcd00     | 	.long 0xcdefab
  0x520: abefcd00     | 	.long 0xcdefab
  0x524: abefcd00     | 	.long 0xcdefab
  0x528: abefcd00     | 	.long 0xcdefab
  0x52c: abefcd00     | 	.long 0xcdefab
  0x530: abefcd00     | 	.long 0xcdefab
  0x534: abefcd00     | 	.long 0xcdefab
  0x538: abefcd00     | 	.long 0xcdefab
  0x53c: abefcd00     | 	.long 0xcdefab
  0x540: abefcd00     | 	.long 0xcdefab
  0x544: abefcd00     | 	.long 0xcdefab
  0x548: abefcd00     | 	.long 0xcdefab
  0x54c: abefcd00     | 	.long 0xcdefab
  0x550: abefcd00     | 	.long 0xcdefab
  0x554: abefcd00     | 	.long 0xcdefab
  0x558: abefcd00     | 	.long 0xcdefab
  0x55c: abefcd00     | 	.long 0xcdefab
  0x560: abefcd00     | 	.long 0xcdefab
  0x564: abefcd00     | 	.long 0xcdefab
  0x568: abefcd00     | 	.long 0xcdefab
  0x56c: abefcd00     | 	.long 0xcdefab
  0x570: abefcd00     | 	.long 0xcdefab
  0x574: abefcd00     | 	.long 0xcdefab
  0x578: abefcd00     | 	.long 0xcdefab
  0x57c: abefcd00     | 	.long 0xcdefab
  0x580: abefcd00     | 	.long 0xcdefab
  0x584: abefcd00     | 	.long 0xcdefab
  0x588: abefcd00     | 	.long 0xcdefab
  0x58c: abefcd00     | 	.long 0xcdefab
  0x590: abefcd00     | 	.long 0xcdefab
  0x594: abefcd00     | 	.long 0xcdefab
  0x598: abefcd00     | 	.long 0xcdefab
  0x59c: abefcd00     | 	.long 0xcdefab
  0x5a0: abefcd00     | 	.long 0xcdefab
  0x5a4: abefcd00     | 	.long 0xcdefab
  0x5a8: abefcd00     | 	.long 0xcdefab
  0x5ac: abefcd00     | 	.long 0xcdefab
  0x5b0: abefcd00     | 	.long 0xcdefab
  0x5b4: abefcd00     | 	.long 0xcdefab
  0x5b8: abefcd00     | 	.long 0xcdefab
  0x5bc: abefcd00     | 	.long 0xcdefab
  0x5c0: abefcd00     | 	.long 0xcdefab
  0x5c4: abefcd00     | 	.long 0xcdefab
  0x5c8: abefcd00     | 	.long 0xcdefab
  0x5cc: abefcd00     | 	.long 0xcdefab
  0x5d0: abefcd00     | 	.long 0xcdefab
  0x5d4: abefcd00     | 	.long 0xcdefab
  0x5d8: abefcd00     | 	.long 0xcdefab
  0x5dc: abefcd00     | 	.long 0xcdefab
  0x5e0: abefcd00     | 	.long 0xcdefab
  0x5e4: abefcd00     | 	.long 0xcdefab
  0x5e8: abefcd00     | 	.long 0xcdefab
  0x5ec: abefcd00     | 	.long 0xcdefab
  0x5f0:              | Postdest:
  0x5f0: bcfade00     | 	.long 0xdefabc
                      | 
  0x5f4:              | .align 4
                      | # Run time stack
  0x5f4: 00000000     | 	.long 0
  0x5f8: 00000000     | 	.long 0
  0x5fc: 00000000     | 	.long 0
  0x600: 00000000     | 	.long 0
  0x604: 00000000     | 	.long 0
  0x608: 00000000     | 	.long 0
  0x60c: 00000000     | 	.long 0
  0x610: 00000000     | 	.long 0
  0x614: 00000000     | 	.long 0
  0x618: 00000000     | 	.long 0
  0x61c: 00000000     | 	.long 0
  0x620: 00000000     | 	.long 0
  0x624: 00000000     | 	.long 0
  0x628: 00000000     | 	.long 0
  0x62c: 00000000     | 	.long 0
  0x630: 00000000     | 	.long 0
                      | 
  0x634:              | Stack:
